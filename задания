#include <iostream>
#include <cmath>

float f(float x, float a, float b, float c, float d) {
    return a * x * x * x + b * x * x + c * x + d;
}

float f_prime(float x, float a, float b, float c) {
    return 3 * a * x * x + 2 * b * x + c;
}

void solve_cubic(float a, float b, float c, float d) {
    float x0 = 0;  // Начальное приближение
    const float epsilon = 1e-6;  // Допустимая ошибка
    float x1;

    for (int i = 0; i < 100; ++i) {  // Ограничим количество итераций
        x1 = x0 - f(x0, a, b, c, d) / f_prime(x0, a, b, c);
        
        if (fabs(x1 - x0) < epsilon) {
            break;
        }
        x0 = x1;
    }

    std::cout << "Приблизительное решение: x = " << x1 << std::endl;
}

int main() {
    float a, b, c, d;
    std::cout << "Введите коэффициенты (a, b, c, d): ";
    std::cin >> a >> b >> c >> d;
    solve_cubic(a, b, c, d);
    return 0;
}

// задание урок 1
#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

// Функция для вычисления выражения ((a + 2*b)^11 - 5*c) * 3
double calculateExpression(int a, int b, int c) {
    return (pow(a + 2 * b, 11) - 5 * c) * 3;
}

// Функция для нахождения нетривиальных делителей числа
void printNonTrivialDivisors(int num) {
    cout << "Нетривиальные делители числа " << num << ": ";
    for (int i = 2; i <= num / 2; ++i) {
        if (num % i == 0) {
            cout << i << " ";
        }
    }
    cout << endl;
}

// Функция для замены всех элементов списка, не равных максимальному и минимальному на нули
vector<int> replaceNonExtremes(vector<int>& nums) {
    int maxVal = *max_element(nums.begin(), nums.end());
    int minVal = *min_element(nums.begin(), nums.end());
    for (int& num : nums) {
        if (num != maxVal && num != minVal) {
            num = 0;
        }
    }
    return nums;
}

// Функция для нахождения наибольшего полного квадрата в отрезке от l до r
int largestPerfectSquare(int l, int r) {
    int largestSquare = -1;
    for (int i = sqrt(r); i >= sqrt(l); --i) {
        int square = i * i;
        if (square >= l && square <= r) {
            largestSquare = square;
            break;
        }
    }
    return largestSquare;
}

// Функция для вычисления суммы первых n Фибоначчиевых чисел
int sumOfFibonacci(int n) {
    if (n <= 0) return 0;
    if (n == 1) return 1;

    int a = 0, b = 1, sum = a + b;
    for (int i = 2; i < n; ++i) {
        int next = a + b;
        sum += next;
        a = b;
        b = next;
    }
    return sum;
}

int main() {
    // Вычисление выражения
    int a, b, c;
    cout << "Введите целые числа a, b и c: ";
    cin >> a >> b >> c;
    double result = calculateExpression(a, b, c);
    cout << "Результат выражения: " << result << endl;

    // Ввод числа для делителей
    int number;
    cout << "Введите целое число для нахождения нетривиальных делителей: ";
    cin >> number;
    printNonTrivialDivisors(number);

    // Ввод списка чисел
    int n;
    cout << "Введите размер списка: ";
    cin >> n;
    vector<int> nums(n);
    cout << "Введите " << n << " целых числа: ";
    for (int i = 0; i < n; ++i) {
        cin >> nums[i];
    }
    vector<int> modifiedList = replaceNonExtremes(nums);
    cout << "Измененный список: ";
    for (int num : modifiedList) {
        cout << num << " ";
    }
    cout << endl;

    // Ввод отрезка для нахождения полного квадрата
    int l, r;
    cout << "Введите границы отрезка (l и r): ";
    cin >> l >> r;
    int largestSquare = largestPerfectSquare(l, r);
    if (largestSquare != -1) {
        cout << "Наибольший полный квадрат в отрезке [" << l << ", " << r << "]: " << largestSquare << endl;
    } else {
        cout << "Нет полных квадратов в данном отрезке." << endl;
    }

    // Ввод числа для суммы Фибоначчиевых чисел
    int fibCount;
    cout << "Введите количество первых Фибоначчиевых чисел для суммы: ";
    cin >> fibCount;
    int fibSum = sumOfFibonacci(fibCount);
    cout << "Сумма первых " << fibCount << " Фибоначчиевых чисел: " << fibSum << endl;

    return 0;
}
